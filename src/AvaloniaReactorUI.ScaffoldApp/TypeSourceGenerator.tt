<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     AvaloniaReactorUI.ScaffoldApp Version: <#= Assembly.GetExecutingAssembly().GetName().Version #>
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows.Input;

using Avalonia;
using Avalonia.Animation;
using Avalonia.Controls;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Interactivity;
using Avalonia.Input;
using Avalonia.Controls.Primitives;
using Avalonia.Controls.Templates;
using Avalonia.Platform;

using AvaloniaReactorUI.Internals;

namespace AvaloniaReactorUI
{
    public interface IRx<#= TypeName #> : I<#= BaseTypeName #>
    {
    <# foreach (var property in Properties) { #>
        <#= property.PropertyType.Name.ToResevedWordTypeName() #> <#= property.Name #> { get; set; }
    <# } #>

    <# foreach (var ev in Events) { #>
        Action <#= ev.Name #>Action { get; set; }
        Action<<#= ev.EventHandlerType.GetGenericArguments()[0].Name #>> <#= ev.Name #>ActionWithArgs { get; set; }
    <# } #>
    }
    
    public partial class Rx<#= TypeName #><T> : <#= BaseTypeName #><T>, IRx<#= TypeName #> where T : <#= TypeName #>, new()
    {
        public Rx<#= TypeName #>()
        { 
        
        }

        public Rx<#= TypeName #>(Action<T> componentRefAction)
            : base(componentRefAction)
        {

        }

        <# foreach (var property in Properties) { #>
        public <#= property.PropertyType.Name.ToResevedWordTypeName() #> <#= property.Name #> { get; set; } = (<#= property.PropertyType.Name.ToResevedWordTypeName() #>)<#= TypeName #>.<#= property.Name #>Property.GetDefaultValue<T>();
        <# } #>

        <# foreach (var ev in Events) { #>
        public Action <#= ev.Name #>Action { get; set; }
        public Action<<#= ev.EventHandlerType.GetGenericArguments()[0].Name #>> <#= ev.Name #>ActionWithArgs { get; set; }
        <# } #>

        protected override void OnUpdate()
        {
            <# foreach (var property in Properties) { #>
            NativeControl.<#= property.Name #> = <#= property.Name #>;
            <# } #>

            base.OnUpdate();
        }

        protected override void OnAttachNativeEvents()
        {
            <# foreach (var ev in Events) { #>
            if (<#= ev.Name #>Action != null || <#= ev.Name #>ActionWithArgs != null)
            {
                NativeControl.<#= ev.Name #> += NativeControl_<#= ev.Name #>;
            }
            <# } #>

            base.OnAttachNativeEvents();
        }

        private void NativeControl_Click(object sender, RoutedEventArgs e)
        {
            <# foreach (var ev in Events) { #>
            <#= ev.Name #>Action?.Invoke();
            <#= ev.Name #>ActionWithArgs?.Invoke(e);
            <# } #>
        }

        protected override void OnDetachNativeEvents()
        {
            <# foreach (var ev in Events) { #>
            NativeControl.<#= ev.Name #> -= NativeControl_<#= ev.Name #>;
            <# } #>

            base.OnDetachNativeEvents();
        }

    }
    <# if (IsTypeNotAbstractWithEmptyConstructur) { #>
    public partial class Rx<#= TypeName #> : Rx<#= TypeName #><<#= TypeName #>>
    {
        public Rx<#= TypeName #>()
        { 
        
        }

        public Rx<#= TypeName #>(Action<<#= TypeName #>> componentRefAction)
            : base(componentRefAction)
        {

        }
    }
    <# } #>
    public static partial class Rx<#= TypeName #>Extensions
    {
        <# foreach (var property in Properties) { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLowerInvariant() #>, <#= property.PropertyType.Name.ToResevedWordTypeName() #> <#= property.Name.CamelCase() #>) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= property.Name #> = <#= property.Name.CamelCase() #>;
            return <#= TypeName.ToLowerInvariant() #>;
        }
        <# if (property.PropertyType.Name == "Thickness") { #>
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLowerInvariant() #>, double leftRight, double topBottom) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= property.Name #> = new Thickness(leftRight, topBottom);
            return <#= TypeName.ToLowerInvariant() #>;
        }
        public static T <#= property.Name #><T>(this T <#= TypeName.ToLowerInvariant() #>, double uniformSize) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= property.Name #> = new Thickness(uniformSize);
            return <#= TypeName.ToLowerInvariant() #>;
        }
        <# } #>


        <# if (property.PropertyType.Name == "ImageSource") { 
               var propertyName = property.Name.Length <= 6 ? property.Name : property.Name.Substring(0, property.Name.Length - 6); #>

        public static T <#= propertyName #><T>(this T <#= TypeName.ToLowerInvariant() #>, string file) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= property.Name #> = ImageSource.FromFile(file);
            return <#= TypeName.ToLowerInvariant() #>;
        }
        public static T <#= propertyName #><T>(this T <#= TypeName.ToLowerInvariant() #>, string fileAndroid, string fileiOS) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= property.Name #> = Device.RuntimePlatform == Device.Android ? ImageSource.FromFile(fileAndroid) : ImageSource.FromFile(fileiOS);
            return <#= TypeName.ToLowerInvariant() #>;
        }
        public static T <#= propertyName #><T>(this T <#= TypeName.ToLowerInvariant() #>, string resourceName, Assembly sourceAssembly) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= property.Name #> = ImageSource.FromResource(resourceName, sourceAssembly);
            return <#= TypeName.ToLowerInvariant() #>;
        }
        public static T <#= propertyName #><T>(this T <#= TypeName.ToLowerInvariant() #>, Uri imageUri) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= property.Name #> = ImageSource.FromUri(imageUri);
            return <#= TypeName.ToLowerInvariant() #>;
        }
        public static T <#= propertyName #><T>(this T <#= TypeName.ToLowerInvariant() #>, Uri imageUri, bool cachingEnabled, TimeSpan cacheValidity) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= property.Name #> = new UriImageSource
            {
                Uri = imageUri,
                CachingEnabled = cachingEnabled,
                CacheValidity = cacheValidity
            };
            return <#= TypeName.ToLowerInvariant() #>;
        }
        public static T <#= propertyName #><T>(this T <#= TypeName.ToLowerInvariant() #>, Func<Stream> imageStream) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= property.Name #> = ImageSource.FromStream(imageStream);
            return <#= TypeName.ToLowerInvariant() #>;
        }
        <# } #>


        <# } #>

        <# foreach (var ev in Events) { #>
        public static T On<#= ev.Name #><T>(this T <#= TypeName.ToLowerInvariant() #>, Action <#= ev.Name.ToLowerInvariant() #>Action) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= ev.Name #>Action = <#= ev.Name.ToLowerInvariant() #>Action;
            return <#= TypeName.ToLowerInvariant() #>;
        }

        public static T On<#= ev.Name #><T>(this T <#= TypeName.ToLowerInvariant() #>, Action<<#= ev.EventHandlerType.GetGenericArguments()[0].Name #>> <#= ev.Name.ToLowerInvariant() #>ActionWithArgs) where T : IRx<#= TypeName #>
        {
            <#= TypeName.ToLowerInvariant() #>.<#= ev.Name #>ActionWithArgs = <#= ev.Name.ToLowerInvariant() #>ActionWithArgs;
            return <#= TypeName.ToLowerInvariant() #>;
        }
        <# } #>
    }
}
