// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     AvaloniaReactorUI.ScaffoldApp Version: 1.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using Avalonia;
using Avalonia.Animation;
using Avalonia.Controls;
using Avalonia.Layout;
using Avalonia.Media;
using AvaloniaReactorUI.Internals;

namespace AvaloniaReactorUI
{
    public interface IRxVisual : IRxStyledElement
    {
        bool ClipToBounds { get; set; }
        Geometry Clip { get; set; }
        bool IsVisible { get; set; }
        double Opacity { get; set; }
        IBrush OpacityMask { get; set; }
        ITransform RenderTransform { get; set; }
        RelativePoint RenderTransformOrigin { get; set; }
        int ZIndex { get; set; }
    }

    public class RxVisual<T> : RxStyledElement<T>, IRxVisual where T : Visual, new()
    {
        public RxVisual()
        {

        }

        public RxVisual(Action<T> componentRefAction)
            : base(componentRefAction)
        {

        }

        public bool ClipToBounds { get; set; } = (bool)Visual.ClipToBoundsProperty.GetDefaultValue<T>();
        public Geometry Clip { get; set; } = (Geometry)Visual.ClipProperty.GetDefaultValue<T>();
        public bool IsVisible { get; set; } = (bool)Visual.IsVisibleProperty.GetDefaultValue<T>();
        public double Opacity { get; set; } = (double)Visual.OpacityProperty.GetDefaultValue<T>();
        public IBrush OpacityMask { get; set; } = (IBrush)Visual.OpacityMaskProperty.GetDefaultValue<T>();
        public ITransform RenderTransform { get; set; } = (ITransform)Visual.RenderTransformProperty.GetDefaultValue<T>();
        public RelativePoint RenderTransformOrigin { get; set; } = (RelativePoint)Visual.RenderTransformOriginProperty.GetDefaultValue<T>();
        public int ZIndex { get; set; } = (int)Visual.ZIndexProperty.GetDefaultValue<T>();

        protected override void OnUpdate()
        {
            NativeControl.ClipToBounds = ClipToBounds;
            NativeControl.Clip = Clip;
            NativeControl.IsVisible = IsVisible;
            NativeControl.Opacity = Opacity;
            NativeControl.OpacityMask = OpacityMask;
            NativeControl.RenderTransform = RenderTransform;
            NativeControl.RenderTransformOrigin = RenderTransformOrigin;
            NativeControl.ZIndex = ZIndex;

            base.OnUpdate();
        }

    }

    public class RxVisual : RxVisual<Visual>
    {
        public RxVisual()
        {

        }

        public RxVisual(Action<Visual> componentRefAction)
            : base(componentRefAction)
        {

        }
    }

    public static class RxVisualExtensions
    {
        public static T ClipToBounds<T>(this T visual, bool clipToBounds) where T : IRxVisual
        {
            visual.ClipToBounds = clipToBounds;
            return visual;
        }



        public static T Clip<T>(this T visual, Geometry clip) where T : IRxVisual
        {
            visual.Clip = clip;
            return visual;
        }



        public static T IsVisible<T>(this T visual, bool isVisible) where T : IRxVisual
        {
            visual.IsVisible = isVisible;
            return visual;
        }



        public static T Opacity<T>(this T visual, double opacity) where T : IRxVisual
        {
            visual.Opacity = opacity;
            return visual;
        }



        public static T OpacityMask<T>(this T visual, IBrush opacityMask) where T : IRxVisual
        {
            visual.OpacityMask = opacityMask;
            return visual;
        }



        public static T RenderTransform<T>(this T visual, ITransform renderTransform) where T : IRxVisual
        {
            visual.RenderTransform = renderTransform;
            return visual;
        }



        public static T RenderTransformOrigin<T>(this T visual, RelativePoint renderTransformOrigin) where T : IRxVisual
        {
            visual.RenderTransformOrigin = renderTransformOrigin;
            return visual;
        }



        public static T ZIndex<T>(this T visual, int zIndex) where T : IRxVisual
        {
            visual.ZIndex = zIndex;
            return visual;
        }



    }
}