// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     AvaloniaReactorUI.ScaffoldApp Version: 1.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using Avalonia;
using Avalonia.Animation;
using Avalonia.Controls;
using Avalonia.Layout;

using AvaloniaReactorUI.Internals;

namespace AvaloniaReactorUI
{
    public interface IRxControl : IRxInputElement
    {
        object Tag { get; set; }
        ContextMenu ContextMenu { get; set; }
    }

    public class RxControl<T> : RxInputElement<T>, IRxControl where T : Control, new()
    {
        public RxControl()
        {

        }

        public RxControl(Action<T> componentRefAction)
            : base(componentRefAction)
        {

        }

        public object Tag { get; set; } = (object)Control.TagProperty.GetDefaultValue<T>();
        public ContextMenu ContextMenu { get; set; } = (ContextMenu)Control.ContextMenuProperty.GetDefaultValue<T>();

        protected override void OnUpdate()
        {
            NativeControl.Tag = Tag;
            NativeControl.ContextMenu = ContextMenu;

            base.OnUpdate();
        }

    }

    public class RxControl : RxControl<Control>
    {
        public RxControl()
        {

        }

        public RxControl(Action<Control> componentRefAction)
            : base(componentRefAction)
        {

        }
    }

    public static class RxControlExtensions
    {
        public static T Tag<T>(this T control, object tag) where T : IRxControl
        {
            control.Tag = tag;
            return control;
        }



        public static T ContextMenu<T>(this T control, ContextMenu contextMenu) where T : IRxControl
        {
            control.ContextMenu = contextMenu;
            return control;
        }

    }
}
