// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     AvaloniaReactorUI.ScaffoldApp Version: 1.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using Avalonia;
using Avalonia.Animation;
using Avalonia.Controls;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Interactivity;
using Avalonia.Input;
using Avalonia.Controls.Primitives;
using Avalonia.Controls.Templates;

using AvaloniaReactorUI.Internals;

namespace AvaloniaReactorUI
{
    public interface IRxTopLevel : IRxContentControl
    {
        WindowTransparencyLevel TransparencyLevelHint { get; set; }
        IBrush TransparencyBackgroundFallback { get; set; }
    }

    public class RxTopLevel<T> : RxContentControl<T>, IRxTopLevel where T : TopLevel, new()
    {
        public RxTopLevel()
        {

        }

        public RxTopLevel(Action<T> componentRefAction)
            : base(componentRefAction)
        {

        }

        public WindowTransparencyLevel TransparencyLevelHint { get; set; } = (WindowTransparencyLevel)TopLevel.TransparencyLevelHintProperty.GetDefaultValue<T>();
        public IBrush TransparencyBackgroundFallback { get; set; } = (IBrush)TopLevel.TransparencyBackgroundFallbackProperty.GetDefaultValue<T>();

        protected override void OnUpdate()
        {
            NativeControl.TransparencyLevelHint = TransparencyLevelHint;
            NativeControl.TransparencyBackgroundFallback = TransparencyBackgroundFallback;

            base.OnUpdate();
        }

    }
    public static class RxTopLevelExtensions
    {
        public static T TransparencyLevelHint<T>(this T toplevel, WindowTransparencyLevel transparencyLevelHint) where T : IRxTopLevel
        {
            toplevel.TransparencyLevelHint = transparencyLevelHint;
            return toplevel;
        }




        public static T TransparencyBackgroundFallback<T>(this T toplevel, IBrush transparencyBackgroundFallback) where T : IRxTopLevel
        {
            toplevel.TransparencyBackgroundFallback = transparencyBackgroundFallback;
            return toplevel;
        }
    }
}