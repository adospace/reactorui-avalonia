// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     AvaloniaReactorUI.ScaffoldApp Version: 1.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using Avalonia;
using Avalonia.Animation;
using Avalonia.Controls;
using Avalonia.Layout;

using AvaloniaReactorUI.Internals;

namespace AvaloniaReactorUI
{
    public interface IRxLayoutable : IRxVisual
    {
        double Width { get; set; }
        double Height { get; set; }
        double MinWidth { get; set; }
        double MaxWidth { get; set; }
        double MinHeight { get; set; }
        double MaxHeight { get; set; }
        Thickness Margin { get; set; }
        HorizontalAlignment HorizontalAlignment { get; set; }
        VerticalAlignment VerticalAlignment { get; set; }
        bool UseLayoutRounding { get; set; }
    }

    public partial class RxLayoutable<T> : RxVisual<T>, IRxLayoutable where T : Layoutable, new()
    {
        public RxLayoutable()
        {

        }

        public RxLayoutable(Action<T> componentRefAction)
            : base(componentRefAction)
        {

        }

        public double Width { get; set; } = (double)Layoutable.WidthProperty.GetDefaultValue<T>();
        public double Height { get; set; } = (double)Layoutable.HeightProperty.GetDefaultValue<T>();
        public double MinWidth { get; set; } = (double)Layoutable.MinWidthProperty.GetDefaultValue<T>();
        public double MaxWidth { get; set; } = (double)Layoutable.MaxWidthProperty.GetDefaultValue<T>();
        public double MinHeight { get; set; } = (double)Layoutable.MinHeightProperty.GetDefaultValue<T>();
        public double MaxHeight { get; set; } = (double)Layoutable.MaxHeightProperty.GetDefaultValue<T>();
        public Thickness Margin { get; set; } = (Thickness)Layoutable.MarginProperty.GetDefaultValue<T>();
        public HorizontalAlignment HorizontalAlignment { get; set; } = (HorizontalAlignment)Layoutable.HorizontalAlignmentProperty.GetDefaultValue<T>();
        public VerticalAlignment VerticalAlignment { get; set; } = (VerticalAlignment)Layoutable.VerticalAlignmentProperty.GetDefaultValue<T>();
        public bool UseLayoutRounding { get; set; } = (bool)Layoutable.UseLayoutRoundingProperty.GetDefaultValue<T>();

        protected override void OnUpdate()
        {
            NativeControl.Width = Width;
            NativeControl.Height = Height;
            NativeControl.MinWidth = MinWidth;
            NativeControl.MaxWidth = MaxWidth;
            NativeControl.MinHeight = MinHeight;
            NativeControl.MaxHeight = MaxHeight;
            NativeControl.Margin = Margin;
            NativeControl.HorizontalAlignment = HorizontalAlignment;
            NativeControl.VerticalAlignment = VerticalAlignment;
            NativeControl.UseLayoutRounding = UseLayoutRounding;

            base.OnUpdate();
        }

    }

    public partial class RxLayoutable : RxLayoutable<Layoutable>
    {
        public RxLayoutable()
        {

        }

        public RxLayoutable(Action<Layoutable> componentRefAction)
            : base(componentRefAction)
        {

        }
    }

    public static partial class RxLayoutableExtensions
    {
        public static T Width<T>(this T layoutable, double width) where T : IRxLayoutable
        {
            layoutable.Width = width;
            return layoutable;
        }



        public static T Height<T>(this T layoutable, double height) where T : IRxLayoutable
        {
            layoutable.Height = height;
            return layoutable;
        }



        public static T MinWidth<T>(this T layoutable, double minWidth) where T : IRxLayoutable
        {
            layoutable.MinWidth = minWidth;
            return layoutable;
        }



        public static T MaxWidth<T>(this T layoutable, double maxWidth) where T : IRxLayoutable
        {
            layoutable.MaxWidth = maxWidth;
            return layoutable;
        }



        public static T MinHeight<T>(this T layoutable, double minHeight) where T : IRxLayoutable
        {
            layoutable.MinHeight = minHeight;
            return layoutable;
        }



        public static T MaxHeight<T>(this T layoutable, double maxHeight) where T : IRxLayoutable
        {
            layoutable.MaxHeight = maxHeight;
            return layoutable;
        }



        public static T Margin<T>(this T layoutable, Thickness margin) where T : IRxLayoutable
        {
            layoutable.Margin = margin;
            return layoutable;
        }
        public static T Margin<T>(this T layoutable, double leftRight, double topBottom) where T : IRxLayoutable
        {
            layoutable.Margin = new Thickness(leftRight, topBottom);
            return layoutable;
        }
        public static T Margin<T>(this T layoutable, double uniformSize) where T : IRxLayoutable
        {
            layoutable.Margin = new Thickness(uniformSize);
            return layoutable;
        }



        public static T HorizontalAlignment<T>(this T layoutable, HorizontalAlignment horizontalAlignment) where T : IRxLayoutable
        {
            layoutable.HorizontalAlignment = horizontalAlignment;
            return layoutable;
        }



        public static T VerticalAlignment<T>(this T layoutable, VerticalAlignment verticalAlignment) where T : IRxLayoutable
        {
            layoutable.VerticalAlignment = verticalAlignment;
            return layoutable;
        }



        public static T UseLayoutRounding<T>(this T layoutable, bool useLayoutRounding) where T : IRxLayoutable
        {
            layoutable.UseLayoutRounding = useLayoutRounding;
            return layoutable;
        }
    }
}