// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     AvaloniaReactorUI.ScaffoldApp Version: 1.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using Avalonia;
using Avalonia.Animation;
using Avalonia.Controls;
using AvaloniaReactorUI.Internals;

namespace AvaloniaReactorUI
{
    public interface IRxAnimatable : IVisualNode
    {
        IClock Clock { get; set; }
        Transitions Transitions { get; set; }
    }

    public class RxAnimatable<T> : VisualNode<T>, IRxAnimatable where T : Animatable, new()
    {
        public RxAnimatable()
        {

        }

        public RxAnimatable(Action<T> componentRefAction)
            : base(componentRefAction)
        {

        }

        public IClock Clock { get; set; } = (IClock)Animatable.ClockProperty.GetDefaultValue<T>();
        public Transitions Transitions { get; set; } = (Transitions)Animatable.TransitionsProperty.GetDefaultValue<T>();

        protected override void OnUpdate()
        {
            NativeControl.Clock = Clock;
            NativeControl.Transitions = Transitions;

            base.OnUpdate();
        }

    }

    public class RxAnimatable : RxAnimatable<Animatable>
    {
        public RxAnimatable()
        {

        }

        public RxAnimatable(Action<Animatable> componentRefAction)
            : base(componentRefAction)
        {

        }
    }

    public static class RxAnimatableExtensions
    {
        public static T Clock<T>(this T animatable, IClock clock) where T : IRxAnimatable
        {
            animatable.Clock = clock;
            return animatable;
        }



        public static T Transitions<T>(this T animatable, Transitions transitions) where T : IRxAnimatable
        {
            animatable.Transitions = transitions;
            return animatable;
        }



    }
}
