// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     AvaloniaReactorUI.ScaffoldApp Version: 1.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows.Input;

using Avalonia;
using Avalonia.Animation;
using Avalonia.Controls;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Interactivity;
using Avalonia.Input;
using Avalonia.Controls.Primitives;
using Avalonia.Controls.Templates;
using Avalonia.Platform;

using AvaloniaReactorUI.Internals;

namespace AvaloniaReactorUI
{
    public interface IRxPanel : IRxControl
    {
        IBrush Background { get; set; }

    }

    public partial class RxPanel<T> : RxControl<T>, IRxPanel where T : Panel, new()
    {
        public RxPanel()
        {

        }

        public RxPanel(Action<T> componentRefAction)
            : base(componentRefAction)
        {

        }

        public IBrush Background { get; set; } = (IBrush)Panel.BackgroundProperty.GetDefaultValue<T>();


        protected override void OnUpdate()
        {
            NativeControl.Background = Background;

            base.OnUpdate();
        }

        protected override void OnAttachNativeEvents()
        {

            base.OnAttachNativeEvents();
        }

        private void NativeControl_Click(object sender, RoutedEventArgs e)
        {
        }

        protected override void OnDetachNativeEvents()
        {

            base.OnDetachNativeEvents();
        }

    }
    public partial class RxPanel : RxPanel<Panel>
    {
        public RxPanel()
        {

        }

        public RxPanel(Action<Panel> componentRefAction)
            : base(componentRefAction)
        {

        }
    }
    public static partial class RxPanelExtensions
    {
        public static T Background<T>(this T panel, IBrush background) where T : IRxPanel
        {
            panel.Background = background;
            return panel;
        }
    }
}