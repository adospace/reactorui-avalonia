// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     AvaloniaReactorUI.ScaffoldApp Version: 1.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using Avalonia;
using Avalonia.Animation;
using Avalonia.Controls;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Interactivity;
using Avalonia.Input;
using Avalonia.Controls.Primitives;
using Avalonia.Controls.Templates;

using AvaloniaReactorUI.Internals;
using Avalonia.Platform;

namespace AvaloniaReactorUI
{
    public interface IRxWindow : IRxWindowBase
    {
        SizeToContent SizeToContent { get; set; }
        bool ExtendClientAreaToDecorationsHint { get; set; }
        ExtendClientAreaChromeHints ExtendClientAreaChromeHints { get; set; }
        double ExtendClientAreaTitleBarHeightHint { get; set; }
        SystemDecorations SystemDecorations { get; set; }
        bool ShowInTaskbar { get; set; }
        WindowState WindowState { get; set; }
        string Title { get; set; }
        WindowIcon Icon { get; set; }
        WindowStartupLocation WindowStartupLocation { get; set; }
        bool CanResize { get; set; }
    }

    public class RxWindow<T> : RxWindowBase<T>, IRxWindow where T : Window, new()
    {
        public RxWindow()
        {
            
        }

        public RxWindow(Action<T> componentRefAction)
            : base(componentRefAction)
        {

        }

        public SizeToContent SizeToContent { get; set; } = (SizeToContent)Window.SizeToContentProperty.GetDefaultValue<T>();
        public bool ExtendClientAreaToDecorationsHint { get; set; } = (bool)Window.ExtendClientAreaToDecorationsHintProperty.GetDefaultValue<T>();
        public ExtendClientAreaChromeHints ExtendClientAreaChromeHints { get; set; } = (ExtendClientAreaChromeHints)Window.ExtendClientAreaChromeHintsProperty.GetDefaultValue<T>();
        public double ExtendClientAreaTitleBarHeightHint { get; set; } = (double)Window.ExtendClientAreaTitleBarHeightHintProperty.GetDefaultValue<T>();
        public SystemDecorations SystemDecorations { get; set; } = (SystemDecorations)Window.SystemDecorationsProperty.GetDefaultValue<T>();
        public bool ShowInTaskbar { get; set; } = (bool)Window.ShowInTaskbarProperty.GetDefaultValue<T>();
        public WindowState WindowState { get; set; } = (WindowState)Window.WindowStateProperty.GetDefaultValue<T>();
        public string Title { get; set; } = (string)Window.TitleProperty.GetDefaultValue<T>();
        public WindowIcon Icon { get; set; } = (WindowIcon)Window.IconProperty.GetDefaultValue<T>();
        public WindowStartupLocation WindowStartupLocation { get; set; } = (WindowStartupLocation)Window.WindowStartupLocationProperty.GetDefaultValue<T>();
        public bool CanResize { get; set; } = (bool)Window.CanResizeProperty.GetDefaultValue<T>();

        protected override void OnUpdate()
        {
            NativeControl.SizeToContent = SizeToContent;
            NativeControl.ExtendClientAreaToDecorationsHint = ExtendClientAreaToDecorationsHint;
            NativeControl.ExtendClientAreaChromeHints = ExtendClientAreaChromeHints;
            NativeControl.ExtendClientAreaTitleBarHeightHint = ExtendClientAreaTitleBarHeightHint;
            NativeControl.SystemDecorations = SystemDecorations;
            NativeControl.ShowInTaskbar = ShowInTaskbar;
            NativeControl.WindowState = WindowState;
            NativeControl.Title = Title;
            NativeControl.Icon = Icon;
            NativeControl.WindowStartupLocation = WindowStartupLocation;
            NativeControl.CanResize = CanResize;

            base.OnUpdate();
        }

    }
    public class RxWindow : RxWindow<Window>
    {
        public RxWindow()
        {

        }

        public RxWindow(Action<Window> componentRefAction)
            : base(componentRefAction)
        {

        }
    }
    public static class RxWindowExtensions
    {
        public static T SizeToContent<T>(this T window, SizeToContent sizeToContent) where T : IRxWindow
        {
            window.SizeToContent = sizeToContent;
            return window;
        }




        public static T ExtendClientAreaToDecorationsHint<T>(this T window, bool extendClientAreaToDecorationsHint) where T : IRxWindow
        {
            window.ExtendClientAreaToDecorationsHint = extendClientAreaToDecorationsHint;
            return window;
        }




        public static T ExtendClientAreaChromeHints<T>(this T window, ExtendClientAreaChromeHints extendClientAreaChromeHints) where T : IRxWindow
        {
            window.ExtendClientAreaChromeHints = extendClientAreaChromeHints;
            return window;
        }




        public static T ExtendClientAreaTitleBarHeightHint<T>(this T window, double extendClientAreaTitleBarHeightHint) where T : IRxWindow
        {
            window.ExtendClientAreaTitleBarHeightHint = extendClientAreaTitleBarHeightHint;
            return window;
        }




        public static T SystemDecorations<T>(this T window, SystemDecorations systemDecorations) where T : IRxWindow
        {
            window.SystemDecorations = systemDecorations;
            return window;
        }




        public static T ShowInTaskbar<T>(this T window, bool showInTaskbar) where T : IRxWindow
        {
            window.ShowInTaskbar = showInTaskbar;
            return window;
        }




        public static T WindowState<T>(this T window, WindowState windowState) where T : IRxWindow
        {
            window.WindowState = windowState;
            return window;
        }




        public static T Title<T>(this T window, string title) where T : IRxWindow
        {
            window.Title = title;
            return window;
        }




        public static T Icon<T>(this T window, WindowIcon icon) where T : IRxWindow
        {
            window.Icon = icon;
            return window;
        }




        public static T WindowStartupLocation<T>(this T window, WindowStartupLocation windowStartupLocation) where T : IRxWindow
        {
            window.WindowStartupLocation = windowStartupLocation;
            return window;
        }




        public static T CanResize<T>(this T window, bool canResize) where T : IRxWindow
        {
            window.CanResize = canResize;
            return window;
        }

    }
}