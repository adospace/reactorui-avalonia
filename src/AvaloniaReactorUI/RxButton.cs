// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     AvaloniaReactorUI.ScaffoldApp Version: 1.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows.Input;

using Avalonia;
using Avalonia.Animation;
using Avalonia.Controls;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Interactivity;
using Avalonia.Input;
using Avalonia.Controls.Primitives;
using Avalonia.Controls.Templates;
using Avalonia.Platform;

using AvaloniaReactorUI.Internals;

namespace AvaloniaReactorUI
{
    public interface IRxButton : IRxContentControl
    {
        ClickMode ClickMode { get; set; }
        ICommand Command { get; set; }
        KeyGesture HotKey { get; set; }
        object CommandParameter { get; set; }
        bool IsDefault { get; set; }
        bool IsCancel { get; set; }

        Action ClickAction { get; set; }
        Action<RoutedEventArgs> ClickActionWithArgs { get; set; }
    }

    public partial class RxButton<T> : RxContentControl<T>, IRxButton where T : Button, new()
    {
        public RxButton()
        {

        }

        public RxButton(Action<T> componentRefAction)
            : base(componentRefAction)
        {

        }

        public ClickMode ClickMode { get; set; } = (ClickMode)Button.ClickModeProperty.GetDefaultValue<T>();
        public ICommand Command { get; set; } = (ICommand)Button.CommandProperty.GetDefaultValue<T>();
        public KeyGesture HotKey { get; set; } = (KeyGesture)Button.HotKeyProperty.GetDefaultValue<T>();
        public object CommandParameter { get; set; } = (object)Button.CommandParameterProperty.GetDefaultValue<T>();
        public bool IsDefault { get; set; } = (bool)Button.IsDefaultProperty.GetDefaultValue<T>();
        public bool IsCancel { get; set; } = (bool)Button.IsCancelProperty.GetDefaultValue<T>();

        public Action ClickAction { get; set; }
        public Action<RoutedEventArgs> ClickActionWithArgs { get; set; }

        protected override void OnUpdate()
        {
            NativeControl.ClickMode = ClickMode;
            NativeControl.Command = Command;
            NativeControl.HotKey = HotKey;
            NativeControl.CommandParameter = CommandParameter;
            NativeControl.IsDefault = IsDefault;
            NativeControl.IsCancel = IsCancel;

            base.OnUpdate();
        }

        protected override void OnAttachNativeEvents()
        {
            if (ClickAction != null || ClickActionWithArgs != null)
            {
                NativeControl.Click += NativeControl_Click;
            }

            base.OnAttachNativeEvents();
        }

        private void NativeControl_Click(object sender, RoutedEventArgs e)
        {
            ClickAction?.Invoke();
            ClickActionWithArgs?.Invoke(e);
        }

        protected override void OnDetachNativeEvents()
        {
            NativeControl.Click -= NativeControl_Click;

            base.OnDetachNativeEvents();
        }

    }
    public partial class RxButton : RxButton<Button>
    {
        public RxButton()
        {

        }

        public RxButton(Action<Button> componentRefAction)
            : base(componentRefAction)
        {

        }
    }
    public static partial class RxButtonExtensions
    {
        public static T ClickMode<T>(this T button, ClickMode clickMode) where T : IRxButton
        {
            button.ClickMode = clickMode;
            return button;
        }




        public static T Command<T>(this T button, ICommand command) where T : IRxButton
        {
            button.Command = command;
            return button;
        }




        public static T HotKey<T>(this T button, KeyGesture hotKey) where T : IRxButton
        {
            button.HotKey = hotKey;
            return button;
        }




        public static T CommandParameter<T>(this T button, object commandParameter) where T : IRxButton
        {
            button.CommandParameter = commandParameter;
            return button;
        }




        public static T IsDefault<T>(this T button, bool isDefault) where T : IRxButton
        {
            button.IsDefault = isDefault;
            return button;
        }




        public static T IsCancel<T>(this T button, bool isCancel) where T : IRxButton
        {
            button.IsCancel = isCancel;
            return button;
        }





        public static T OnClick<T>(this T button, Action clickAction) where T : IRxButton
        {
            button.ClickAction = clickAction;
            return button;
        }

        public static T OnClick<T>(this T button, Action<RoutedEventArgs> clickActionWithArgs) where T : IRxButton
        {
            button.ClickActionWithArgs = clickActionWithArgs;
            return button;
        }
    }
}
