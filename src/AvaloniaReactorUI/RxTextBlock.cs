// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     AvaloniaReactorUI.ScaffoldApp Version: 1.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using Avalonia;
using Avalonia.Animation;
using Avalonia.Controls;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Interactivity;
using Avalonia.Input;
using Avalonia.Controls.Primitives;
using Avalonia.Controls.Templates;
using Avalonia.Platform;

using AvaloniaReactorUI.Internals;

namespace AvaloniaReactorUI
{
    public interface IRxTextBlock : IRxControl
    {
        IBrush Background { get; set; }
        Thickness Padding { get; set; }
        FontFamily FontFamily { get; set; }
        double FontSize { get; set; }
        FontStyle FontStyle { get; set; }
        FontWeight FontWeight { get; set; }
        IBrush Foreground { get; set; }
        double LineHeight { get; set; }
        int MaxLines { get; set; }
        string Text { get; set; }
        TextAlignment TextAlignment { get; set; }
        TextWrapping TextWrapping { get; set; }
        TextTrimming TextTrimming { get; set; }
        TextDecorationCollection TextDecorations { get; set; }
    }

    public partial class RxTextBlock<T> : RxControl<T>, IRxTextBlock where T : TextBlock, new()
    {
        public RxTextBlock()
        {

        }

        public RxTextBlock(Action<T> componentRefAction)
            : base(componentRefAction)
        {

        }

        public IBrush Background { get; set; } = (IBrush)TextBlock.BackgroundProperty.GetDefaultValue<T>();
        public Thickness Padding { get; set; } = (Thickness)TextBlock.PaddingProperty.GetDefaultValue<T>();
        public FontFamily FontFamily { get; set; } = (FontFamily)TextBlock.FontFamilyProperty.GetDefaultValue<T>();
        public double FontSize { get; set; } = (double)TextBlock.FontSizeProperty.GetDefaultValue<T>();
        public FontStyle FontStyle { get; set; } = (FontStyle)TextBlock.FontStyleProperty.GetDefaultValue<T>();
        public FontWeight FontWeight { get; set; } = (FontWeight)TextBlock.FontWeightProperty.GetDefaultValue<T>();
        public IBrush Foreground { get; set; } = (IBrush)TextBlock.ForegroundProperty.GetDefaultValue<T>();
        public double LineHeight { get; set; } = (double)TextBlock.LineHeightProperty.GetDefaultValue<T>();
        public int MaxLines { get; set; } = (int)TextBlock.MaxLinesProperty.GetDefaultValue<T>();
        public string Text { get; set; } = (string)TextBlock.TextProperty.GetDefaultValue<T>();
        public TextAlignment TextAlignment { get; set; } = (TextAlignment)TextBlock.TextAlignmentProperty.GetDefaultValue<T>();
        public TextWrapping TextWrapping { get; set; } = (TextWrapping)TextBlock.TextWrappingProperty.GetDefaultValue<T>();
        public TextTrimming TextTrimming { get; set; } = (TextTrimming)TextBlock.TextTrimmingProperty.GetDefaultValue<T>();
        public TextDecorationCollection TextDecorations { get; set; } = (TextDecorationCollection)TextBlock.TextDecorationsProperty.GetDefaultValue<T>();

        protected override void OnUpdate()
        {
            NativeControl.Background = Background;
            NativeControl.Padding = Padding;
            NativeControl.FontFamily = FontFamily;
            NativeControl.FontSize = FontSize;
            NativeControl.FontStyle = FontStyle;
            NativeControl.FontWeight = FontWeight;
            NativeControl.Foreground = Foreground;
            NativeControl.LineHeight = LineHeight;
            NativeControl.MaxLines = MaxLines;
            NativeControl.Text = Text;
            NativeControl.TextAlignment = TextAlignment;
            NativeControl.TextWrapping = TextWrapping;
            NativeControl.TextTrimming = TextTrimming;
            NativeControl.TextDecorations = TextDecorations;

            base.OnUpdate();
        }

    }
    public partial class RxTextBlock : RxTextBlock<TextBlock>
    {
        public RxTextBlock()
        {

        }

        public RxTextBlock(Action<TextBlock> componentRefAction)
            : base(componentRefAction)
        {

        }
    }
    public static partial class RxTextBlockExtensions
    {
        public static T Background<T>(this T textblock, IBrush background) where T : IRxTextBlock
        {
            textblock.Background = background;
            return textblock;
        }




        public static T Padding<T>(this T textblock, Thickness padding) where T : IRxTextBlock
        {
            textblock.Padding = padding;
            return textblock;
        }
        public static T Padding<T>(this T textblock, double leftRight, double topBottom) where T : IRxTextBlock
        {
            textblock.Padding = new Thickness(leftRight, topBottom);
            return textblock;
        }
        public static T Padding<T>(this T textblock, double uniformSize) where T : IRxTextBlock
        {
            textblock.Padding = new Thickness(uniformSize);
            return textblock;
        }




        public static T FontFamily<T>(this T textblock, FontFamily fontFamily) where T : IRxTextBlock
        {
            textblock.FontFamily = fontFamily;
            return textblock;
        }




        public static T FontSize<T>(this T textblock, double fontSize) where T : IRxTextBlock
        {
            textblock.FontSize = fontSize;
            return textblock;
        }




        public static T FontStyle<T>(this T textblock, FontStyle fontStyle) where T : IRxTextBlock
        {
            textblock.FontStyle = fontStyle;
            return textblock;
        }




        public static T FontWeight<T>(this T textblock, FontWeight fontWeight) where T : IRxTextBlock
        {
            textblock.FontWeight = fontWeight;
            return textblock;
        }




        public static T Foreground<T>(this T textblock, IBrush foreground) where T : IRxTextBlock
        {
            textblock.Foreground = foreground;
            return textblock;
        }




        public static T LineHeight<T>(this T textblock, double lineHeight) where T : IRxTextBlock
        {
            textblock.LineHeight = lineHeight;
            return textblock;
        }




        public static T MaxLines<T>(this T textblock, int maxLines) where T : IRxTextBlock
        {
            textblock.MaxLines = maxLines;
            return textblock;
        }




        public static T Text<T>(this T textblock, string text) where T : IRxTextBlock
        {
            textblock.Text = text;
            return textblock;
        }




        public static T TextAlignment<T>(this T textblock, TextAlignment textAlignment) where T : IRxTextBlock
        {
            textblock.TextAlignment = textAlignment;
            return textblock;
        }




        public static T TextWrapping<T>(this T textblock, TextWrapping textWrapping) where T : IRxTextBlock
        {
            textblock.TextWrapping = textWrapping;
            return textblock;
        }

        public static T TextTrimming<T>(this T textblock, TextTrimming textTrimming) where T : IRxTextBlock
        {
            textblock.TextTrimming = textTrimming;
            return textblock;
        }

        public static T TextDecorations<T>(this T textblock, TextDecorationCollection textDecorations) where T : IRxTextBlock
        {
            textblock.TextDecorations = textDecorations;
            return textblock;
        }
    }
}