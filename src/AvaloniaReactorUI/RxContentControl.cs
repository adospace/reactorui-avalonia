// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     AvaloniaReactorUI.ScaffoldApp Version: 1.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using Avalonia;
using Avalonia.Animation;
using Avalonia.Controls;
using Avalonia.Layout;
using Avalonia.Media;
using Avalonia.Interactivity;
using Avalonia.Input;
using Avalonia.Controls.Primitives;
using Avalonia.Controls.Templates;
using Avalonia.Platform;

using AvaloniaReactorUI.Internals;

namespace AvaloniaReactorUI
{
    public interface IRxContentControl : IRxTemplatedControl
    {
        object Content { get; set; }
        IDataTemplate ContentTemplate { get; set; }
        HorizontalAlignment HorizontalContentAlignment { get; set; }
        VerticalAlignment VerticalContentAlignment { get; set; }
    }

    public partial class RxContentControl<T> : RxTemplatedControl<T>, IRxContentControl where T : ContentControl, new()
    {
        public RxContentControl()
        {

        }

        public RxContentControl(Action<T> componentRefAction)
            : base(componentRefAction)
        {

        }

        public object Content { get; set; } = (object)ContentControl.ContentProperty.GetDefaultValue<T>();
        public IDataTemplate ContentTemplate { get; set; } = (IDataTemplate)ContentControl.ContentTemplateProperty.GetDefaultValue<T>();
        public HorizontalAlignment HorizontalContentAlignment { get; set; } = (HorizontalAlignment)ContentControl.HorizontalContentAlignmentProperty.GetDefaultValue<T>();
        public VerticalAlignment VerticalContentAlignment { get; set; } = (VerticalAlignment)ContentControl.VerticalContentAlignmentProperty.GetDefaultValue<T>();

        protected override void OnUpdate()
        {
            NativeControl.Content = Content;
            NativeControl.ContentTemplate = ContentTemplate;
            NativeControl.HorizontalContentAlignment = HorizontalContentAlignment;
            NativeControl.VerticalContentAlignment = VerticalContentAlignment;

            base.OnUpdate();
        }

    }
    public partial class RxContentControl : RxContentControl<ContentControl>
    {
        public RxContentControl()
        {

        }

        public RxContentControl(Action<ContentControl> componentRefAction)
            : base(componentRefAction)
        {

        }
    }
    public static partial class RxContentControlExtensions
    {
        public static T Content<T>(this T contentcontrol, object content) where T : IRxContentControl
        {
            contentcontrol.Content = content;
            return contentcontrol;
        }




        public static T ContentTemplate<T>(this T contentcontrol, IDataTemplate contentTemplate) where T : IRxContentControl
        {
            contentcontrol.ContentTemplate = contentTemplate;
            return contentcontrol;
        }




        public static T HorizontalContentAlignment<T>(this T contentcontrol, HorizontalAlignment horizontalContentAlignment) where T : IRxContentControl
        {
            contentcontrol.HorizontalContentAlignment = horizontalContentAlignment;
            return contentcontrol;
        }




        public static T VerticalContentAlignment<T>(this T contentcontrol, VerticalAlignment verticalContentAlignment) where T : IRxContentControl
        {
            contentcontrol.VerticalContentAlignment = verticalContentAlignment;
            return contentcontrol;
        }
    }
}