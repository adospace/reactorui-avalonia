// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     AvaloniaReactorUI.ScaffoldApp Version: 1.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using Avalonia;
using Avalonia.Animation;
using Avalonia.Controls;
using Avalonia.Layout;
using Avalonia.Controls.Primitives;
using Avalonia.Media;

using AvaloniaReactorUI.Internals;
using Avalonia.Controls.Templates;

namespace AvaloniaReactorUI
{
    public interface IRxTemplatedControl : IRxControl
    {
        IBrush Background { get; set; }
        IBrush BorderBrush { get; set; }
        Thickness BorderThickness { get; set; }
        FontFamily FontFamily { get; set; }
        double FontSize { get; set; }
        FontStyle FontStyle { get; set; }
        FontWeight FontWeight { get; set; }
        IBrush Foreground { get; set; }
        Thickness Padding { get; set; }
    }

    public class RxTemplatedControl<T> : RxControl<T>, IRxTemplatedControl where T : TemplatedControl, new()
    {
        public RxTemplatedControl()
        {

        }

        public RxTemplatedControl(Action<T> componentRefAction)
            : base(componentRefAction)
        {

        }

        public IBrush Background { get; set; } = (IBrush)TemplatedControl.BackgroundProperty.GetDefaultValue<T>();
        public IBrush BorderBrush { get; set; } = (IBrush)TemplatedControl.BorderBrushProperty.GetDefaultValue<T>();
        public Thickness BorderThickness { get; set; } = (Thickness)TemplatedControl.BorderThicknessProperty.GetDefaultValue<T>();
        public FontFamily FontFamily { get; set; } = (FontFamily)TemplatedControl.FontFamilyProperty.GetDefaultValue<T>();
        public double FontSize { get; set; } = (double)TemplatedControl.FontSizeProperty.GetDefaultValue<T>();
        public FontStyle FontStyle { get; set; } = (FontStyle)TemplatedControl.FontStyleProperty.GetDefaultValue<T>();
        public FontWeight FontWeight { get; set; } = (FontWeight)TemplatedControl.FontWeightProperty.GetDefaultValue<T>();
        public IBrush Foreground { get; set; } = (IBrush)TemplatedControl.ForegroundProperty.GetDefaultValue<T>();
        public Thickness Padding { get; set; } = (Thickness)TemplatedControl.PaddingProperty.GetDefaultValue<T>();

        protected override void OnUpdate()
        {
            NativeControl.Background = Background;
            NativeControl.BorderBrush = BorderBrush;
            NativeControl.BorderThickness = BorderThickness;
            NativeControl.FontFamily = FontFamily;
            NativeControl.FontSize = FontSize;
            NativeControl.FontStyle = FontStyle;
            NativeControl.FontWeight = FontWeight;
            NativeControl.Foreground = Foreground;
            NativeControl.Padding = Padding;

            base.OnUpdate();
        }
    }

    public class RxTemplatedControl : RxTemplatedControl<TemplatedControl>
    {
        public RxTemplatedControl()
        {

        }

        public RxTemplatedControl(Action<TemplatedControl> componentRefAction)
            : base(componentRefAction)
        {

        }
    }

    public static class RxTemplatedControlExtensions
    {
        public static T Background<T>(this T templatedcontrol, IBrush background) where T : IRxTemplatedControl
        {
            templatedcontrol.Background = background;
            return templatedcontrol;
        }



        public static T BorderBrush<T>(this T templatedcontrol, IBrush borderBrush) where T : IRxTemplatedControl
        {
            templatedcontrol.BorderBrush = borderBrush;
            return templatedcontrol;
        }



        public static T BorderThickness<T>(this T templatedcontrol, Thickness borderThickness) where T : IRxTemplatedControl
        {
            templatedcontrol.BorderThickness = borderThickness;
            return templatedcontrol;
        }
        public static T BorderThickness<T>(this T templatedcontrol, double leftRight, double topBottom) where T : IRxTemplatedControl
        {
            templatedcontrol.BorderThickness = new Thickness(leftRight, topBottom);
            return templatedcontrol;
        }
        public static T BorderThickness<T>(this T templatedcontrol, double uniformSize) where T : IRxTemplatedControl
        {
            templatedcontrol.BorderThickness = new Thickness(uniformSize);
            return templatedcontrol;
        }



        public static T FontFamily<T>(this T templatedcontrol, FontFamily fontFamily) where T : IRxTemplatedControl
        {
            templatedcontrol.FontFamily = fontFamily;
            return templatedcontrol;
        }



        public static T FontSize<T>(this T templatedcontrol, double fontSize) where T : IRxTemplatedControl
        {
            templatedcontrol.FontSize = fontSize;
            return templatedcontrol;
        }




        public static T FontStyle<T>(this T templatedcontrol, FontStyle fontStyle) where T : IRxTemplatedControl
        {
            templatedcontrol.FontStyle = fontStyle;
            return templatedcontrol;
        }



        public static T FontWeight<T>(this T templatedcontrol, FontWeight fontWeight) where T : IRxTemplatedControl
        {
            templatedcontrol.FontWeight = fontWeight;
            return templatedcontrol;
        }



        public static T Foreground<T>(this T templatedcontrol, IBrush foreground) where T : IRxTemplatedControl
        {
            templatedcontrol.Foreground = foreground;
            return templatedcontrol;
        }



        public static T Padding<T>(this T templatedcontrol, Thickness padding) where T : IRxTemplatedControl
        {
            templatedcontrol.Padding = padding;
            return templatedcontrol;
        }
        public static T Padding<T>(this T templatedcontrol, double leftRight, double topBottom) where T : IRxTemplatedControl
        {
            templatedcontrol.Padding = new Thickness(leftRight, topBottom);
            return templatedcontrol;
        }
        public static T Padding<T>(this T templatedcontrol, double uniformSize) where T : IRxTemplatedControl
        {
            templatedcontrol.Padding = new Thickness(uniformSize);
            return templatedcontrol;
        }



        //public static T Template<T>(this T templatedcontrol, IControlTemplate template) where T : IRxTemplatedControl
        //{
        //    templatedcontrol.Template = template;
        //    return templatedcontrol;
        //}



    }
}
